paste(Sys.Date(),
"heatmap_p_values_protocol",
".png",
sep = "_" )
),
width = 18,
height = 18,
dpi = 300,
units = "cm"
)
heatmap_f_values <- both %>%
dplyr::filter(statistic == "f_value") %>%
arrange(desc(value)) %>%
#  as_tibble() %>%
ggplot(., aes(x = contrast,
y = reorder(analyte, value))) +
geom_tile(aes(fill = value), color = "white") +
scale_fill_gradient(low = "white", high = "darkgreen") +
ylab("Analyte") +
xlab("Contrast") +
theme(legend.title = element_text(size = 10),
legend.text = element_text(size = 12),
plot.title = element_text(size=16),
axis.title=element_text(size=14,face="bold"),
axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(plot.margin=unit(c(2,2,2,2),"cm"))
heatmap_f_values
ggsave(plot = heatmap_f_values,
filename = file.path(
params$path_out,
paste(Sys.Date(),
"heatmap_f_values_protocol",
".svg",
sep = "_" )
),
width = 14,
height = 18,
dpi = 300,
units = "cm"
)
ggsave(plot = heatmap_f_values,
filename = file.path(
params$path_out,
paste(Sys.Date(),
"heatmap_f_values_protocol",
".png",
sep = "_" )
),
width = 18,
height = 18,
dpi = 300,
units = "cm"
)
# Chunk 31
library(kinetics)
data("analyte_data", package = "kinetics")
data_summary <- analyte_data %>%
arrange(protocol, analyte)
data_summary
data_summary$analyte <- as.factor(data_summary$analyte)
levels(data_summary$analyte)
data_split <- split(data_summary,
droplevels(data_summary$analyte))
# Chunk 32
data("analyte_annotations", package = "kinetics")
# Chunk 33
palette <- RColorBrewer::brewer.pal(7, "Set1")
palette <- c(palette[c(1:3,4,5)])
# Chunk 34
image_directory <- params$loose_images
dir.create(image_directory)
# argument for function test
analyte = "ala"
kinetics::draw_lines(DF = data_split[[1]], palette_graph = palette)
test_lines <- print_lines(analyte = "SODIUM")
test_lines
test_lines <- print_lines(analyte = "INSULINE")
test_lines
run_plotlist <- function(){
plot_list <- lapply(levels(data_summary$analyte), print_lines)
names(plot_list) <- levels(data_summary$analyte)
names(plot_list)
}
# Chunk 35
## test
kinetics::print_lines_panel("GLU_NS", x_pos = c(1,2))
print_lines_panel("POTASSIUM", x_pos = c(1,2))
# Chunk 36
## generate plotlist
analytes <- c(
"BICARB",
"KREAT",
"POTASSIUM",
"SODIUM",
"CHLORIDE",
"ALB",
"INSULINE",
"GLU_NS",
"LEUCO",
"ERY",
"HB",
"HT")
analyte_data <- data_summary %>%
dplyr::filter(analyte %in% analytes) %>%
droplevels()
levels(analyte_data$analyte)
x_pos_list <- list(
"alb" = c(1,3),
"bicarb" = c(1,3),
"chloride" = c(1,3),
"ery" = c(1,3),
"glu_ns" = c(1,2), ## the GLU_NS set has less time points
"hb" = c(1,3),
"ht" = c(1,3),
"insuline" = c(1,3),
"kreat" = c(1,3),
"leuco" = c(1,3),
"potassium" = c(1,3),
"sodium" = c(1,3)
)
x_pos_list
## select analytes relevant for kinetics paper - panels
analyte_data <- data_summary %>%
dplyr::filter(analyte %in% analytes) %>%
droplevels()
levels(analyte_data$analyte)
panel_plot_list <- map2(
.x = levels(analyte_data$analyte),
.y = x_pos_list,
.f = print_lines_panel
)
panel_plot_list
## check x_pos for GLU_NS
names(panel_plot_list) <- levels(analyte_data$analyte)
names(panel_plot_list)
## save to disk for use in the package
# usethis::use_data(panel_plot_list)
# Chunk 37
## Panels
## get panel plotlist
#panel_plot_list <- readr::read_rds(
#  path = here::here("data", "panel_plot_list.rds")
#  )
#•	Bicarbonate, kreatinine, potassium, sodium, chloride
#•	Albumine, insulin, glucose
#•	Leukocytes, erythrocytes, Hb, Ht
## read panel_plot_list from disk
#panel_plot_list <- readr::read_rds(path = here::here(
#  "data",
#  "panel_plot_list.rds"
#  ))
# figure 1; panel
p1_a <- panel_plot_list[["BICARB"]]
#p1_a
p1_b <- panel_plot_list[["KREAT"]]
p1_c <- panel_plot_list[["POTASSIUM"]]
p1_e <- panel_plot_list[["SODIUM"]]
p1_d <- panel_plot_list[["CHLORIDE"]]
# figure 2; panel
p2_a <- panel_plot_list[["ALB"]]
p2_b <- panel_plot_list[["INSULINE"]]
p2_c <- panel_plot_list[["GLU_NS"]]
# figure 3; panel
p3_a <- panel_plot_list[["LEUCO"]] + ylab("Counts")
p3_b <- panel_plot_list[["ERY"]] + ylab("Counts")
p3_c <- panel_plot_list[["HB"]]
p3_d <- panel_plot_list[["HT"]]
# figure 4; panel
#p4_a <- panel_plot_list[["CHLORIDE"]]
#p4_b <- panel_plot_list[["ALB"]]
#p4_c <- panel_plot_list[["ERY"]]
## Panels
## dimensions
height <- 26
width <- 28
resolution <- 600
# Chunk 38
###Figure 1
library(cowplot)
library(svglite)
# https://cran.r-project.org/web/packages/cowplot/vignettes/shared_legends.html
horizontal_label_offset <- -7
vertical_label_offset <- 4
label_size <- 20
figure_1 <- cowplot::plot_grid( p1_a + theme(legend.position="none"),
p1_b + theme(legend.position="none"),
p1_c + theme(legend.position="none"),
p1_d + theme(legend.position="none"),
p1_e + theme(legend.position="none"),
align = 'vh',
#    labels = c("A", "B", "C", "D", "E"),
hjust = horizontal_label_offset,
vjust = vertical_label_offset,
ncol = 3,
label_size = label_size
)
figure_1
legend_1 <- get_legend(p1_a + theme(legend.position="bottom"))
p_1 <- plot_grid(legend_1, figure_1, ncol = 1, rel_heights = c(0.05, 1))
p_1
## citrulliner::save_in_image_directory(filename = "test2.svg", height = 26, width = 7)
# Chunk 39
ggsave(p_1, filename = file.path(
params$path_out,
paste(Sys.Date(),
"kinetics_fig_1.svg", sep = "_")),
height = height/2.2,
width = width/1.5,
dpi = resolution/2)
ggsave(p_1, filename = file.path(
params$path_out,
paste(Sys.Date(),
"kinetics_fig_1.png", sep = "_")),
height = height/2.2,
width = width/1.5,
dpi = resolution/2)
ggsave(p_1, filename = file.path(
params$path_out,
paste(Sys.Date(),
"kinetics_fig_1.jpeg", sep = "_")),
height = height/2.2,
width = width/1.5,
dpi = resolution/2)
# Chunk 40
### Figure 2
figure_2 <- plot_grid( p2_a + theme(legend.position="none"),
p2_b + theme(legend.position="none"),
p2_c + theme(legend.position="none"),
align = 'vh',
#     labels = c("A", "B", "C"),
hjust = horizontal_label_offset,
vjust = vertical_label_offset-1,
ncol = 3,
label_size = label_size
)
# figure_2
legend_2 <- get_legend(p2_a + theme(legend.position="bottom"))
p_2 <- plot_grid(legend_2, figure_2, ncol = 1, rel_heights = c(0.05, 1))
p_2
## citrulliner::save_in_image_directory(filename = "test2.svg", height = 26, width = 7)
# Chunk 41
ggsave(p_2, filename = file.path(
params$path_out,
paste(Sys.Date(),
"kinetics_fig_2.svg", sep = "_")),
height = height/4.5,
width = width/1.5,
dpi = resolution/2)
ggsave(p_2, filename = file.path(
params$path_out,
paste(Sys.Date(),
"kinetics_fig_2.png", sep = "_")),
height = height/4.5,
width = width/1.5,
dpi = resolution/2)
ggsave(p_2, filename = file.path(
params$path_out,
paste(Sys.Date(),
"kinetics_fig_2.jpeg", sep = "_")),
height = height/4.5,
width = width/1.5,
dpi = resolution/2)
# Chunk 42
figure_3 <- plot_grid( p3_a + theme(legend.position="none"),
p3_b + theme(legend.position="none"),
p3_c + theme(legend.position="none"),
p3_d + theme(legend.position="none"),
align = 'vh',
#   labels = c("A", "B", "C", "D"),
hjust = horizontal_label_offset,
vjust = vertical_label_offset,
ncol = 2,
label_size = label_size
)
# figure_3
legend_3 <- get_legend(p3_a + theme(legend.position="bottom"))
p_3 <- plot_grid(legend_3, figure_3, ncol = 1, rel_heights = c(0.05, 1))
## citrulliner::save_in_image_directory(filename = "test2.svg", height = 26, width = 7)
p_3
# Chunk 43
ggsave(p_3, filename = file.path(
params$path_out,
paste(Sys.Date(),
"kinetics_fig_3.svg", sep = "_")),
height = height/2.4,
width = width/2.4,
dpi = resolution/2)
ggsave(p_3, filename = file.path(
params$path_out,
paste(Sys.Date(),
"kinetics_fig_3.png", sep = "_")),
height = height/2.4,
width = width/2.4,
dpi = resolution/2)
ggsave(p_3, filename = file.path(
params$path_out,
paste(Sys.Date(),
"kinetics_fig_3.jpeg", sep = "_")),
height = height/2.4,
width = width/2.4,
dpi = resolution/2)
## all analytes in data
unique(data_summary$analyte) %>%
as.character %>%
sort %>%
print()
analytes_heatmap <- unique(with_stars$data$analyte) %>%
as.character() %>%
sort() %>%
print()
#  as_tibble() %>%
with_stars <- ggplot(data = heatmap_f_values, aes(x = contrast,
y = reorder(analyte, value))) +
geom_tile(aes(fill = value), color = "white") +
scale_fill_gradient(low = "white", high = "darkgreen") +
geom_text(data = heatmap_p_values,
aes(label = sprintf("%1.3s", stars)), vjust = 0.6, size = 3) +
ylab("Parameter") +
xlab("Comparison") +
theme(legend.title = element_text(size = 10),
legend.text = element_text(size = 12),
plot.title = element_text(size=16),
axis.title=element_text(size=14,face="bold"),
axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(plot.margin=unit(c(2,2,2,2),"cm")) +
theme_bw() +
labs(fill = "F Value")
invalid_params <- c("gfra", "ip10", "facd", "crph", "tnfa")
## F-values
heatmap_f_values <- both %>%
dplyr::filter(statistic == "f_value") %>%
dplyr::filter(!analyte %in% invalid_params) %>%
arrange(desc(value))
heatmap_f_values
## function to convert p-value to stars
signif_num <- function(x) {
symnum(x, corr = FALSE, na = FALSE, legend = FALSE,
cutpoints = c(0, 0.001, 0.01, 0.05, 0.1, 1),
symbols = c("***", "**", "*", "#", "+"))
}
heatmap_p_values <- both %>%
dplyr::filter(statistic == "p_value") %>%
dplyr::filter(!analyte %in% invalid_params) %>%
mutate(
original_value = (value/1000),
log10_p = log10(value),
stars_noquote = signif_num(original_value)) %>%
mutate(stars = as.character(stars_noquote)) %>%
arrange(desc(value))
heatmap_p_values
heatmap_p_values %>%
dplyr::filter(analyte == "lys")
# checking other duplicates
# names(heatmap_p_values)
x <- heatmap_p_values %>%
dplyr::select(analyte, contrast) %>%
group_by(analyte) %>%
nest()
how_many_contrasts <- function(i){
i %>% nrow()
}
x <- x %>%
mutate(number_contrasts = map(data, how_many_contrasts))
#  as_tibble() %>%
with_stars <- ggplot(data = heatmap_f_values, aes(x = contrast,
y = reorder(analyte, value))) +
geom_tile(aes(fill = value), color = "white") +
scale_fill_gradient(low = "white", high = "darkgreen") +
geom_text(data = heatmap_p_values,
aes(label = sprintf("%1.3s", stars)), vjust = 0.6, size = 3) +
ylab("Parameter") +
xlab("Comparison") +
theme(legend.title = element_text(size = 10),
legend.text = element_text(size = 12),
plot.title = element_text(size=16),
axis.title=element_text(size=14,face="bold"),
axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(plot.margin=unit(c(2,2,2,2),"cm")) +
theme_bw() +
labs(fill = "F Value")
with_stars
heatmap_f_values
analytes_heatmap <- unique(heatmap_f_values) %>%
as.character() %>%
sort() %>%
print()
analytes_heatmap <- unique(heatmap_f_values$analyte) %>%
as.character() %>%
sort() %>%
print()
analytes_paper <- c(
# line figures
"BICARB", #1
"KREAT", #2
"POTASSIUM", #3
"SODIUM", #4
"CHLORIDE", #5
"ALB", #6
"INSULINE", #7
"GLU_NS", #8
"LEUCO", #9
"ERY", #10
"HB", #11
"HT", #12
## heatmap
"ala",
"arg",
"asp",
"asn",
"citrul",
"CORT",
"glu",
"gln",
"gly",
"ifabp",
"ile",
"leu",
"LYMFO_ABS_CORR",
"lys",
"meth",
"MONO_ABS",
"NEUTRO_ABS",
"pheala",
"ser",
"tau",
"thre",
"trp",
"tyr",
"UREUM",
"val"
)
analytes_paper %>% sort
length(analytes_paper)
data_paper_summary <- data_summary %>%
dplyr::filter(analyte %in% analytes_paper) %>%
print()
unique(data_paper_summary$analyte) %>% as.character() %>% sort %>% length()
analytes_paper %>% sort %>% length()
analytes_paper %in% unique(data_paper_summary$analyte)
## add rpe
rpe_summary <- rpe_scores_clean %>%
group_by(protocol, time) %>%
summarise(mean_conc = round(mean(rpe, na.rm = TRUE), digits = 3),
sd = round(sd(rpe, na.rm = TRUE), digits = 2),
n_obs = n()) %>%
dplyr::filter(time != 65) %>%
dplyr::rename(measured = mean_conc) %>%
dplyr::mutate(analyte = "RPE") %>%
dplyr::select(protocol, time, analyte, measured, sd, n_obs)
rpe_summary
## REname
data_paper_summary <- data_paper_summary %>%
dplyr::rename(measured = mean_conc)
## combine RPE with rest
data_paper_summary_all <-
dplyr::bind_rows(
rpe_summary,
data_paper_summary
) %>%
dplyr::rename(mean = measured) %>%
arrange(protocol, analyte, time)
data_paper_summary_all$analyte %>% unique()
## add zonuline
source(
here::here(
"R",
"data_clean_grinta_zonulin.R"
)
)
zonulin <- data_clean_grinta_zonulin()
## add zonuline
source(
here::here(
"R",
"data_clean_grinta_zonulin.R"
)
)
zonulin <- data_clean_grinta_zonulin()
## clean op for join
names(data_paper_summary_all)
zonulin_clean <- zonulin %>%
dplyr::mutate(time = as.character(time)) %>%
dplyr::rename(analyte = analyse) %>%
dplyr::select(subject,
protocol,
time,
analyte,
result)
zonulin_clean
zonulin_summary <- zonulin_clean %>%
group_by(protocol, time, analyte) %>%
summarise(mean = round(mean(result, na.rm = TRUE), digits = 3),
sd = round(sd(result, na.rm = TRUE), digits = 2),
n_obs = n())
zonulin_summary
names(zonulin_summary) == names(data_paper_summary_all)
## row bind zonuline to summary data
data_paper_all_final <- dplyr::bind_rows(
data_paper_summary_all,
zonulin_summary
) %>%
arrange(analyte, protocol, time)
data_paper_all_final
usethis::use_data(data_paper_all_final)
devtools::document()
devtools::document()
devtools::build_vignettes()
devtools::build_vignettes("kinetics")
devtools::build_vignettes(".")
devtools::build_vignettes("..")
devtools::build_vignettes("../")
devtools::build_vignettes(pkg = ".")
